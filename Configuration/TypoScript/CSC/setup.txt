# ***************************************************************************
# Notice: "styles." (and "temp.") objects are UNSET after template parsing!
# Use "lib." for persisting storage of objects.
# ***************************************************************************

# Clear out any constants in this reserved room!
styles.content >

# get content
styles.content.get = CONTENT
styles.content.get {
	table = tt_content
	select.orderBy = sorting
	select.where = colPos=0
	select.languageField = sys_language_uid
}

# get content, left
styles.content.getLeft < styles.content.get
styles.content.getLeft.select.where = colPos=1

# get content, right
styles.content.getRight < styles.content.get
styles.content.getRight.select.where = colPos=2

# get content, margin
styles.content.getBorder < styles.content.get
styles.content.getBorder.select.where = colPos=3

# get news
styles.content.getNews < styles.content.get
styles.content.getNews.select.pidInList = {$styles.content.getNews.newsPid}

# Edit page object:
styles.content.editPanelPage = COA
styles.content.editPanelPage {
	10 = EDITPANEL
	10 {
		allow = toolbar,move,hide
		label.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.page
		label.wrap = |&nbsp;<b>%s</b>
	}
}











# *********************************************************************
# "lib." objects are preserved from unsetting after template parsing
# *********************************************************************

# Creates persistent ParseFunc setup for non-HTML content. This is recommended to use (as a reference!)
lib.parseFunc {
	makelinks = 1
	makelinks.http.keep = {$styles.content.links.keep}
	makelinks.http.extTarget = {$styles.content.links.extTarget}
	makelinks.mailto.keep = path
	tags {
		link = TEXT
		link {
			current = 1
			typolink.parameter.data = parameters : allParams
			typolink.extTarget = {$styles.content.links.extTarget}
			typolink.target = {$styles.content.links.target}
			parseFunc.constants =1
		}
	}
	allowTags = {$styles.content.links.allowTags}
	denyTags = *
	sword = <span class="csc-sword">|</span>
	constants = 1

	nonTypoTagStdWrap.HTMLparser = 1
	nonTypoTagStdWrap.HTMLparser {
		keepNonMatchedTags = 1
		htmlSpecialChars = 2
	}
}

# good old parsefunc in "styles.content.parseFunc" is created for backwards compatibility. Don't use it, just ignore.
styles.content.parseFunc < lib.parseFunc

# Creates persistent ParseFunc setup for RTE content (which is mainly HTML) based on the "ts_css" transformation.
lib.parseFunc_RTE < lib.parseFunc
lib.parseFunc_RTE {
	//  makelinks >
	# Processing <table> and <blockquote> blocks separately
	externalBlocks = table, blockquote, ol,ul, div
	externalBlocks {
		# The blockquote content is passed into parseFunc again...
		blockquote.stripNL=1
		blockquote.callRecursive=1
		blockquote.callRecursive.tagStdWrap.HTMLparser = 1
		blockquote.callRecursive.tagStdWrap.HTMLparser.tags.blockquote.overrideAttribs = style="margin-bottom:0;margin-top:0;"

		ol.stripNL=1
		ol.stdWrap.parseFunc = < lib.parseFunc

		ul.stripNL=1
		ul.stdWrap.parseFunc = < lib.parseFunc

		table.stripNL=1
		table.stdWrap.HTMLparser = 1
		table.stdWrap.HTMLparser.tags.table.fixAttrib.class {
			default = contenttable
			always = 1
			list = contenttable
		}
		table.stdWrap.HTMLparser.keepNonMatchedTags = 1
		table.HTMLtableCells=1
		table.HTMLtableCells {
			default.callRecursive=1
			addChr10BetweenParagraphs=1
		}
		div.stripNL = 1
		div.callRecursive = 1
	}
	nonTypoTagStdWrap.encapsLines {
		encapsTagList = cite,div,p,pre,h1,h2,h3,h4,h5,h6,blockquote
		remapTag.DIV = P
		nonWrappedTag = P
		innerStdWrap_all.ifBlank = &nbsp;
		#addAttributes.P.class = bodytext
		addAttributes.P.class.setOnly=blank
	}
	nonTypoTagStdWrap.HTMLparser = 1
	nonTypoTagStdWrap.HTMLparser {
		keepNonMatchedTags = 1
		htmlSpecialChars = 2
	}
}

# HEADER
lib {

	# Header
	stdheader = COA
	stdheader {

		# Wrap
		stdWrap {
			innerWrap {

				cObject = COA
				cObject {

					# Opening tag
					10 = TEXT
					10 {
						value = <header
					}

					# Class attribute
					20 = COA
					20 {
						stdWrap {
							noTrimWrap = | class="|"|
							required = 1
						}

						# Alignment
						10 = TEXT
						10 {
							stdWrap {
								wrap = csc-alignment-|
								required = 1
							}

							field = header_position
						}
					}

					# Closing tag
					30 = TEXT
					30 {
						value = >|</header>
					}
				}
			}

			required = 1
		}

		# Group
		10 = COA
		10 {

			# Wrap
			stdWrap {
				wrap = <hgroup>|</hgroup>
				wrap {
					fieldRequired = subheader
				}

				required = 1
			}

			# Header
			10 = CASE
			10 {
				key {
					field = header_layout
				}

				# H1
				default = TEXT
				default {
					wrap = <h1 class="csc-header">|</h1>

					htmlSpecialChars = 1
					brTag = <br />

					field = header

					typolink {
						parameter {
							field = header_link
						}
					}
				}

				# H2
				2 < .default
				2.wrap = <h2 class="csc-header">|</h2>

				# H3
				3 < .default
				3.wrap = <h3 class="csc-header">|</h3>

				# H4
				4 < .default
				4.wrap = <h4 class="csc-header">|</h4>

				# H5
				5 < .default
				5.wrap = <h5 class="csc-header">|</h5>

				if.isTrue.field = header
			}

			# Subheader
			20 = CASE
			20 {
				key {
					field = header_layout
				}

				default = TEXT
				default {
					wrap = <h2 class="csc-subheader">|</h2>

					htmlSpecialChars = 1
					brTag = <br />

					field = subheader
				}

				1 < .default

				2 < .default
				2.wrap = <h3 class="csc-subheader">|</h3>

				3 < .default
				3.wrap = <h4 class="csc-subheader">|</h4>

				4 < .default
				4.wrap = <h5 class="csc-subheader">|</h5>

				5 < .default
				5.wrap = <h6 class="csc-subheader">|</h6>

				if.isTrue.field = subheader
			}
		}

		# Date
		20 = COA
		20 {
			stdWrap {
				wrap = <p class="csc-date">|</p>

				innerWrap {
					cObject = COA
					cObject {

						10 = TEXT
						10 {
							value = <time
						}

						20 = TEXT
						20 {
							noTrimWrap = | datetime="|"|

							field = date
							strftime = %Y-%m-%d
						}

						30 = TEXT
						30 {
							value = >|</time>
						}
					}
				}

				required = 1
			}

			10 = TEXT
			10 {
				field = date
				strftime = %x
			}

			if.isTrue.field = date
		}
	}
}

# LIBRARY
includeLibs.tx_cssstyledcontent_pi1 = EXT:css_styled_content/pi1/class.tx_cssstyledcontent_pi1.php

# CONTENT
tt_content >
tt_content = CASE
tt_content {

	# Wrap
	stdWrap {
		innerWrap {
			cObject = COA
			cObject {

				# Wrap
				10 = CASE
				10 {

					# Key
					key {
						field = CType
					}

					# Default wrap
					default = COA
					default {

						# Opening tag
						10 = TEXT
						10 {
							value = <section id="csc-{field:uid}"
							insertData = 1
						}

						# Class attribute
						20 = COA
						20 {
							stdWrap {
								noTrimWrap = | class="|"|
								required = 1
							}

							# Default
							10 = TEXT
							10 {
								value = csc-default
							}

							# Content
							20 = TEXT
							20 {
								stdWrap {
									noTrimWrap = | csc-content-||
								}

								field = CType
							}

							# Plugin
							30 = TEXT
							30 {
								stdWrap {
									noTrimWrap = | csc-plugin-||
									required = 1
								}

								field = list_type

								if {
									equals = list
									value.field = CType
									isTrue.field = list_type
								}
							}

							# Layout
							40 = TEXT
							40 {
								stdWrap {
									noTrimWrap = | csc-layout-||
								}

								field = layout

								if {
									isTrue.field = layout
								}
							}

							# Frame
							50 = TEXT
							50 {
								stdWrap {
									noTrimWrap = | csc-frame-||
								}

								field = section_frame

								if {
									isTrue.field = section_frame
								}
							}

							# Image orientation
							60 = COA
							60 {
								stdWrap {
									noTrimWrap = | csc-orientation-||
								}

								10 = CASE
								10 {
									key {
										field = imageorient
									}

									# 0: Above, center
									default = TEXT
									default {
										value = centertop
									}

									# 1 Above, right
									1 < .default
									1.value = righttop

									# 2 Above, left
									2 < .default
									2.value = lefttop

									# 8 Below, center
									8 < .default
									8.value = centerbottom

									# 9 Below, right
									9 < .default
									9.value = rightbottom

									# 10 Below, left
									10 < .default
									10.value = leftbottom

									# 17 In text, right
									17 < .default
									17.value = floatright

									# 18 In text, left
									18 < .default
									18.value = floatleft

									# 25 Beside Text, Right
									25 < .default
									25.value = right

									# 26 Beside Text, Left
									26 < .default
									26.value = left
								}

								if {
									value = image,textpic
									isInList.field = CType
								}
							}
						}

						# Closing tag
						30 = COA
						30 {

							10 = TEXT
							10 {
								value = >|
							}

							# Anchor
							20 = TEXT
							20 {
								value = <p class="csc-anchor"><a href="#">{LLL:EXT:css_styled_content/pi1/locallang.xml:label.toTop}</a></p>
								fieldRequired = linkToTop
								insertData = 1
							}

							30 = TEXT
							30 {
								value = </section>
							}
						}
					}

					shortcut < .default
					shortcut {

						# Opening tag
						10.value = <div id="csc-{field:uid}"

						# Class attribute
						20.20.stdWrap.noTrimWrap = | csc-||

						# Closing Tag
						30.30.value = </div>
					}

					div < .default
					div {

						# Opening tag
						10.value = <div id="csc-{field:uid}"

						# Class attribute
						20.20.stdWrap.noTrimWrap = | csc-||

						# Closing Tag
						30.30.value = </div>
					}

					html < .default
					html {

						# Opening tag
						10.value = <div id="csc-{field:uid}"

						# Class attribute
						20.20.stdWrap.noTrimWrap = | csc-||

						# Closing Tag
						30.30.value = </div>
					}
				}
			}
		}

		required = 1
	}

	# Key
	key {
		field = CType
	}
}

# HEADER
tt_content.header = COA
tt_content.header {

	# Header
	10 =< lib.stdheader
}

# TEXT
tt_content.text = COA
tt_content.text {

	# Header
	10 =< lib.stdheader

	# Text
	20 = TEXT
	20 {
		field = bodytext
		required = 1

		parseFunc =< lib.parseFunc_RTE
	}
}

# IMAGE
tt_content.image = COA
tt_content.image.10 = < lib.stdheader
tt_content.image.20 = USER
tt_content.image.20 {
	userFunc = tx_cssstyledcontent_pi1->render_textpic

	# Image source
	imgList.field = image
	imgPath = uploads/pics/

	# Single image rendering
	imgObjNum = 1
	1 {
		file.import.current = 1
		file.width.field = imagewidth
		imageLinkWrap = 1
		imageLinkWrap {
			bodyTag = <body style="margin:0; background:#fff;">
			wrap = <a href="javascript:close();"> | </a>
			width = {$styles.content.imgtext.linkWrap.width}
			height = {$styles.content.imgtext.linkWrap.height}
			effects = {$styles.content.imgtext.linkWrap.effects}

			JSwindow = 1
			JSwindow.newWindow = {$styles.content.imgtext.linkWrap.newWindow}
			JSwindow.if.isFalse = {$styles.content.imgtext.linkWrap.lightboxEnabled}

			directImageLink = {$styles.content.imgtext.linkWrap.lightboxEnabled}

			enable.field = image_zoom
			enable.ifEmpty.typolink.parameter.field = image_link
			enable.ifEmpty.typolink.parameter.listNum.splitChar = 10
			enable.ifEmpty.typolink.parameter.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
			enable.ifEmpty.typolink.returnLast = url

			typolink.parameter.field = image_link
			typolink.parameter.listNum.splitChar = 10
			typolink.parameter.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
			typolink.target = {$styles.content.links.target}
			typolink.extTarget = {$styles.content.links.extTarget}

			linkParams.ATagParams.dataWrap =  class="{$styles.content.imgtext.linkWrap.lightboxCssClass}" rel="{$styles.content.imgtext.linkWrap.lightboxRelAttribute}"
		}

		altText = TEXT
		altText {
			field = altText
			stripHtml = 1
			split.token.char = 10
			split.token.if.isTrue = {$styles.content.imgtext.imageTextSplit}
			split.returnKey.data = register : IMAGE_NUM_CURRENT
		}

		titleText < .altText
		titleText.field = titleText

		longdescURL < .altText
		longdescURL.field = longdescURL

		emptyTitleHandling = {$styles.content.imgtext.emptyTitleHandling}
		titleInLink = {$styles.content.imgtext.titleInLink}
		titleInLinkAndImg = {$styles.content.imgtext.titleInLinkAndImg}
	}

	textPos.field = imageorient
	maxW = {$styles.content.imgtext.maxW}
	maxW.override.data = register:maxImageWidth
	maxWInText = {$styles.content.imgtext.maxWInText}
	maxWInText.override.data = register:maxImageWidthInText

	equalH.field = imageheight

	image_compression.field = image_compression
	image_effects.field = image_effects

	noRows.field = image_noRows

	cols.field = imagecols
	border.field = imageborder

	caption {
		1 = TEXT
		1 {
			field = imagecaption
			required = 1
			parseFunc =< lib.parseFunc
			br = 1
			split.token.char = 10
			split.token.if.isPositive = {$styles.content.imgtext.imageTextSplit} + {$styles.content.imgtext.captionSplit}
			split.returnKey.data = register : IMAGE_NUM_CURRENT
		}
	}
	# captionSplit is deprecated, use imageTextSplit instead
	captionSplit = {$styles.content.imgtext.captionSplit}
	captionAlign.field = imagecaption_position
	# caption/alttext/title/longdescURL splitting
	imageTextSplit = {$styles.content.imgtext.imageTextSplit}

	borderCol = {$styles.content.imgtext.borderColor}
	borderThick = {$styles.content.imgtext.borderThick}
	borderClass = {$styles.content.imgtext.borderClass}
	colSpace = {$styles.content.imgtext.colSpace}
	rowSpace = {$styles.content.imgtext.rowSpace}
	textMargin = {$styles.content.imgtext.textMargin}

	borderSpace = {$styles.content.imgtext.borderSpace}
	separateRows = {$styles.content.imgtext.separateRows}
	addClasses =
	addClassesImage =
	addClassesImage.ifEmpty = csc-column-first csc-column-last
	addClassesImage.override = csc-column-first |*| |*| csc-column-last
	addClassesImage.override.if {
		isGreaterThan.field = imagecols
		value = 1
	}

	imageStdWrap {
		stdWrap {
			innerWrap {
				cObject = COA
				cObject {

					# Opening tag
					10 = TEXT
					10 {
						value = <div
					}

					# Class attribute
					20 = COA
					20 {
						stdWrap {
							noTrimWrap = | class="csc-imagewrap|"|
						}

						# Caption alignment
						10 = TEXT
						10 {
							stdWrap {
								noTrimWrap = | csc-alignment-||
								fieldRequired = imagecaption_position
							}

							field = imagecaption_position
						}

						# Border
						20 = TEXT
						20 {
							stdWrap {
								noTrimWrap = | ||
								required = 1
							}

							value = csc-border
							fieldRequired = imageborder
						}

						# Effects
						30 = TEXT
						30 {
							stdWrap {
								noTrimWrap = | csc-effect-||
								fieldRequired = image_effects
							}

							field = image_effects
						}

						# Compression
						40 = TEXT
						40 {
							stdWrap {
								noTrimWrap = | csc-quality-||
								fieldRequired = image_compression
							}

							field = image_compression
						}
					}

					# Closing tag
					30 = TEXT
					30 {
						value = >|</div>
					}
				}
			}
		}
	}

	imageStdWrapNoWidth < .imageStdWrap

	# if noRows is set, wrap around each column:
	imageColumnStdWrap.dataWrap = <div class="csc-column"> | </div>

	layout = CASE
	layout {
		key.field = imageorient

		# above-center
		# above-right
		# above-left
		# intext-right
		# intext-left
		# intext-right-nowrap
		# intext-left-nowrap
		default = TEXT
		default {
			value = ###IMAGES######TEXT###
		}

		# below-center
		8 = TEXT
		8.value = ###TEXT######IMAGES###

		# below-right
		9 < .8

		# below-left
		10 < .8
	}

	rendering {
		dl {
			# Choose another rendering for special edge cases
			fallbackRendering = COA
			fallbackRendering {
				# Just one image without a caption => don't need the dl-overhead, use the "simple" rendering
				10 = TEXT
				10 {
					if {
						isFalse.field = imagecaption
						value = 1
						equals.data = register:imageCount
					}
					value = simple
				}

				# Multiple images and one global caption => "ul"
				20 = TEXT
				20 {
					if {
						value = 1
						isGreaterThan.data = register:imageCount
						isTrue.if.isTrue.data = register:renderGlobalCaption
						isTrue.field = imagecaption
					}
					value = ul
				}

				# Multiple images and no caption at all => "ul"
				30 = TEXT
				30 {
					if {
						value = 1
						isGreaterThan.data = register:imageCount
						isFalse.field = imagecaption
					}
					value = ul
				}
			}
			imageRowStdWrap.dataWrap = <div class="csc-row"> | </div>
			imageLastRowStdWrap.dataWrap = <div class="csc-row"> | </div>
			noRowsStdWrap.wrap =
			oneImageStdWrap.dataWrap = <figure class="csc-image###CLASSES###"> | </figure>
			imgTagStdWrap.wrap = |
			editIconsStdWrap.wrap = <dd> | </dd>
			caption {
				required = 1
				wrap = <figcaption class="csc-caption"> | </figcaption>
			}
			caption {
				typolink {
					parameter {
						field = longdescURL

						listNum {
							stdWrap {
								data = register:IMAGE_NUM_CURRENT
							}

							splitChar = 10
						}
					}

					target = {$styles.content.links.target}
					extTarget = {$styles.content.links.extTarget}
				}
			}
		}
		ul {
			# Just one image without a caption => don't need the ul-overhead, use the "simple" rendering
			fallbackRendering < tt_content.image.20.rendering.dl.fallbackRendering.10
			imageRowStdWrap.dataWrap = <div class="csc-row"> | </div>
			imageLastRowStdWrap.dataWrap = <div class="csc-row"> | </div>
			noRowsStdWrap.wrap = |
			oneImageStdWrap.dataWrap = <figure class="csc-image###CLASSES###"> | </figure>
			imgTagStdWrap.wrap =
			editIconsStdWrap.wrap = <div> | </div>
			caption.wrap = <figcaption class="csc-caption"> | </figcaption>
			caption {
				typolink {
					parameter {
						field = longdescURL

						listNum {
							stdWrap {
								data = register:IMAGE_NUM_CURRENT
							}

							splitChar = 10
						}
					}

					target = {$styles.content.links.target}
					extTarget = {$styles.content.links.extTarget}
				}
			}
		}
		div {
			# Just one image without a caption => don't need the div-overhead, use the "simple" rendering
			fallbackRendering < tt_content.image.20.rendering.dl.fallbackRendering.10
			imageRowStdWrap.dataWrap = <div class="csc-row"> | </div>
			imageLastRowStdWrap.dataWrap = <div class="csc-row"> | </div>
			noRowsStdWrap.wrap =
			oneImageStdWrap.dataWrap = <div class="csc-image###CLASSES###"> | </div>
			imgTagStdWrap.wrap = <div> | </div>
			editIconsStdWrap.wrap = <div> | </div>
			caption.wrap = <figcaption class="csc-caption"> | </figcaption>
			caption {
				typolink {
					parameter {
						field = longdescURL

						listNum {
							stdWrap {
								data = register:IMAGE_NUM_CURRENT
							}

							splitChar = 10
						}
					}

					target = {$styles.content.links.target}
					extTarget = {$styles.content.links.extTarget}
				}
			}
		}
		simple {
			imageRowStdWrap.dataWrap = <div class="csc-row"> | </div>
			imageLastRowStdWrap.dataWrap = <div class="csc-row"> | </div>
			noRowsStdWrap.wrap =
			oneImageStdWrap.dataWrap = <figure class="csc-image###CLASSES###"> | </figure>
			imgTagStdWrap.wrap = |
			editIconsStdWrap.wrap = |
			caption.wrap = <figcaption class="csc-caption"> | </figcaption>
			caption {
				typolink {
					parameter {
						field = longdescURL

						listNum {
							stdWrap {
								data = register:IMAGE_NUM_CURRENT
							}

							splitChar = 10
						}
					}

					target = {$styles.content.links.target}
					extTarget = {$styles.content.links.extTarget}
				}
			}
			imageStdWrap.dataWrap = |
			imageStdWrapNoWidth.wrap = |
		}
	}
	renderMethod = dl

	editIcons = tt_content : image [imageorient|imagewidth|imageheight], [imagecols|image_noRows|imageborder],[image_link|image_zoom],[image_compression|image_effects|image_frames],imagecaption[imagecaption_position]
	editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.images

	caption.editIcons = tt_content : imagecaption[imagecaption_position]
	caption.editIcons.beforeLastTag=1
	caption.editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.caption

	stdWrap.prefixComment = 2 | Image block:
}

# TEXTPIC
tt_content.textpic = COA
tt_content.textpic {
	10 = COA
	10.if.value = 25
	10.if.isLessThan.field = imageorient
	10.10 = < lib.stdheader

	20  = < tt_content.image.20
	20 {
		text.10 = COA
		text.10 {
			if.value = 24
			if.isGreaterThan.field = imageorient
			10 = < lib.stdheader
		}
		text.20 = < tt_content.text.20
		text.wrap = <div class="csc-text"> | </div>
	}
}

# BULLET
tt_content.bullets = COA
tt_content.bullets {

	# Header
	10 =< lib.stdheader

	# Bullets
	20 = COA
	20 {
		stdWrap {
			wrap = <ul>|</ul>
			required = 1
		}

		# Items
		10 = TEXT
		10 {
			field = bodytext

			trim = 1

			split {
				token {
					char = 10
				}

				cObjNum = |*|1||2|*|

				# Odd bullet
				1 {
					dataWrap = <li id="csc-{field:uid}:{register:SPLIT_COUNT}" class="csc-odd">|</li>

					current = 1
					trim = 1
					parseFunc =< lib.parseFunc
				}

				# Even bullet
				2 < .1
				2 {
					dataWrap = <li id="csc-{field:uid}:{register:SPLIT_COUNT}" class="csc-even">|</li>
				}
			}
		}
	}
}

# TABLE
tt_content.table = COA
tt_content.table {

	# Header
	10 =< lib.stdheader

	# Table
	20 = USER
	20.userFunc = tx_cssstyledcontent_pi1->render_table
	20.field = bodytext

	20.color {
		default =
		1 = #EDEBF1
		2 = #F5FFAA
	}
	20.tableParams_0 {
		border =
		cellpadding =
		cellspacing =
	}
	20.tableParams_1 {
		border =
		cellpadding =
		cellspacing =
	}
	20.tableParams_2 {
		border =
		cellpadding =
		cellspacing =
	}
	20.tableParams_3 {
		border =
		cellpadding =
		cellspacing =
	}
	20.innerStdWrap.wrap = |
	20.innerStdWrap.parseFunc = < lib.parseFunc

	20.stdWrap {
		editIcons = tt_content: cols, bodytext, [layout], [table_bgColor|table_border|table_cellspacing|table_cellpadding]
		editIcons.beforeLastTag = 1
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.table

		prefixComment = 2 | Table:
	}
}

# UPLOADS
tt_content.uploads = COA
tt_content.uploads {

	# Header
	10 =< lib.stdheader

	# Files
	20 = USER
	20 {
		userFunc = tx_cssstyledcontent_pi1->render_uploads

		field = media

		filePath {
			field = select_key
		}

		outerWrap = <dl>|</dl>

		itemRendering = COA
		itemRendering {

			# File
			10 = COA
			10 {
				stdWrap {
					wrap = <dt id="csc-{field:uid}:{register:filename}" class="csc-odd csc-file-{register:fileExtension}">|</dt> |*| <dt id="csc-{field:uid}:{register:filename}" class="csc-even csc-file-{register:fileExtension}">|</dt> || <dt id="csc-{field:uid}:{register:filename}" class="csc-odd csc-file-{register:fileExtension}">|</dt> |*|
					insertData = 1
				}

				# Icon
				10 = TEXT
				10 {
					data = register:linkedIcon
					noTrimWrap = |<span class="csc-icon">|</span> |
					if.isPositive.field = layout
				}

				# Link
				20 = COA
				20 {
					wrap = |

					1 = TEXT
					1 {
						data = register:linkedLabel
						wrap = |
					}
				}

				# Size
				30 = TEXT
				30 {
					data = register:fileSize

					wrap = , <span class="csc-file-size">|</span>

					bytes = 1
					bytes {
						labels = {$styles.content.uploads.filesizeBytesLabels}
					}

					if.isTrue.field = filelink_size
				}
			}

			# Description
			20 = COA
			20 {
				stdWrap {
					wrap = <dd class="csc-odd csc-description">|</dd> |*| <dd class="csc-even csc-description">|</dd> || <dd class="csc-odd csc-description">|</dd> |*|
				}

				10 = TEXT
				10 {
					value = &#8203;

					override {
						cObject = TEXT
						cObject {
							data = register:description
							htmlSpecialChars = 1
						}
					}
				}
			}
		}

		useSpacesInLinkText = 0
		stripFileExtensionFromLinkText = 0

		linkProc {
			target = _blank
			jumpurl = {$styles.content.uploads.jumpurl}
			jumpurl.secure = {$styles.content.uploads.jumpurl_secure}
			jumpurl.secure.mimeTypes = {$styles.content.uploads.jumpurl_secure_mimeTypes}
			removePrependedNumbers = 1

			iconCObject = IMAGE
			iconCObject.file.import.data = register : ICON_REL_PATH
			iconCObject.file.width = 150
		}

		filesize {
			bytes = 1
			bytes.labels = {$styles.content.uploads.filesizeBytesLabels}
		}
	}
}

# MULTIMEDIA
tt_content.multimedia = COA
tt_content.multimedia {

	# Header
	10 =< lib.stdheader

	# Object
	20 = MULTIMEDIA
	20.file.field = multimedia
	20.file.wrap = uploads/media/
	20.file.listNum = 0
	20.params.field = bodytext

	20.stdWrap {
		editIcons = tt_content: multimedia, bodytext
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.multimedia

		prefixComment = 2 | Multimedia element:
	}
}

# SWFOBJECT
tt_content.swfobject = COA
tt_content.swfobject {

	# Header
	10 =< lib.stdheader

	# Object
	20 = SWFOBJECT
	20 {
		file =
		width =
		height =

		flexParams.field = pi_flexform

		alternativeContent.field = bodytext

		layout = ###SWFOBJECT###

		video {
			player = {$styles.content.media.videoPlayer}

			defaultWidth  = {$styles.content.media.defaultVideoWidth}
			defaultHeight  = {$styles.content.media.defaultVideoHeight}

			default {
				params.quality = high
				params.menu = false
				params.allowScriptAccess = sameDomain
				params.allowFullScreen = true
			}
			mapping {

			}
		}

		audio {
			player = {$styles.content.media.audioPlayer}

			defaultWidth = {$styles.content.media.defaultAudioWidth}
			defaultHeight = {$styles.content.media.defaultAudioHeight}

			default {
				params.quality = high
				params.allowScriptAccess = sameDomain
				params.menu = false
			}
			mapping {
				flashvars.file = soundFile
			}
		}

	}
	20.stdWrap {
		editIcons = tt_content: multimedia, imagewidth, imageheight, pi_flexform, bodytext
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.multimedia

		prefixComment = 2 | SWFobject element:
	}
}

# QTOBJECT
tt_content.qtobject = COA
tt_content.qtobject {
	10 = < lib.stdheader

	20 = QTOBJECT
	20 {
		file =
		width =
		height =

		flexParams.field = pi_flexform

		alternativeContent.field = bodytext

		layout = ###QTOBJECT###

		video {
			player = {$styles.content.media.videoPlayer}

			defaultWidth  = {$styles.content.media.defaultVideoWidth}
			defaultHeight  = {$styles.content.media.defaultVideoHeight}

			default {
				params.quality = high
				params.menu = false
				params.allowScriptAccess = sameDomain
				params.allowFullScreen = true
			}
			mapping {

			}
		}

		audio {
			player = {$styles.content.media.audioPlayer}

			defaultWidth = {$styles.content.media.defaultAudioWidth}
			defaultHeight = {$styles.content.media.defaultAudioHeight}

			default {
				params.quality = high
				params.allowScriptAccess = sameDomain
				params.menu = false
			}
			mapping {
				flashvars.file = soundFile
			}
		}
	}
	20.stdWrap {
		editIcons = tt_content: multimedia, imagewidth, imageheight, pi_flexform, bodytext
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.multimedia

		prefixComment = 2 | QTobject element:
	}
}

# MEDIA
tt_content.media = COA
tt_content.media {
	10 = < lib.stdheader

	20 = MEDIA
	20 {

		flexParams.field = pi_flexform
		alternativeContent < tt_content.text.20
		alternativeContent.field = bodytext

		type = video
		renderType = auto
		allowEmptyUrl = 0
		forcePlayer = 1

		fileExtHandler {
			default = MEDIA
			avi = MEDIA
			asf = MEDIA
			class = MEDIA
			wmv = MEDIA
			mp3 = SWF
			mp4 = SWF
			m4v = SWF
			swa = SWF
			flv = SWF
			swf = SWF
			mov = QT
			m4v = QT
			m4a = QT
		}

		mimeConf.swfobject < tt_content.swfobject.20
		mimeConf.qtobject < tt_content.qtobject.20

	}
	20.stdWrap {
		editIcons = tt_content: pi_flexform, bodytext
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.multimedia

		prefixComment = 2 | Media element:
	}
}

# MAILFORM
tt_content.mailform = COA
tt_content.mailform.10 = < lib.stdheader
tt_content.mailform.20 = FORM
tt_content.mailform.20 {
	accessibility = 1
	noWrapAttr=1
	formName = mailform
	dontMd5FieldNames = 1
	layout = <div class="csc-mailform-field">###LABEL### ###FIELD###</div>
	labelWrap.wrap = |
	commentWrap.wrap = |
	radioWrap.wrap = |<br />
	radioWrap.accessibilityWrap = <fieldset###RADIO_FIELD_ID###><legend>###RADIO_GROUP_LABEL###</legend>|</fieldset>
	REQ = 1
	REQ.labelWrap.wrap = |
	COMMENT.layout = <div class="csc-mailform-label">###LABEL###</div>
	RADIO.layout = <div class="csc-mailform-field">###LABEL### <span class="csc-mailform-radio">###FIELD###</span></div>
	LABEL.layout = <div class="csc-mailform-field">###LABEL### <span class="csc-mailform-label">###FIELD###</span></div>
	target = {$styles.content.mailform.target}
	goodMess = {$styles.content.mailform.goodMess}
	badMess = {$styles.content.mailform.badMess}
	redirect.field = pages
	redirect.listNum = 0
	recipient.field = subheader
	data.field = bodytext
	locationData = 1
	hiddenFields.stdWrap.wrap = <div style="display:none;">|</div>

	params.radio = class="csc-mailform-radio"
	params.check = class="csc-mailform-check"
	params.submit = class="csc-mailform-submit"

	stdWrap.wrap = <fieldset class="csc-mailform"> | </fieldset>
	stdWrap {
		editIcons = tt_content: bodytext, pages, subheader
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.form

		prefixComment = 2 | Mail form inserted:
	}
}

# SEARCH
tt_content.search = COA
tt_content.search.10 = < lib.stdheader
# Result:
tt_content.search.20 = SEARCHRESULT
tt_content.search.20 {
	allowedCols = pages.title-subtitle-keywords-description : tt_content.header-bodytext-imagecaption : tt_address.name-title-address-email-company-city-country : tt_links.title-note-note2-url : tt_board.subject-message-author-email : tt_calender.title-note : tt_products.title-note-itemnumber
	languageField.tt_content = sys_language_uid
	renderObj = COA
	renderObj {

		10 = TEXT
		10.field = pages_title
		10.htmlSpecialChars = 1
		10.typolink {
			parameter.field = uid
			target = {$styles.content.searchresult.resultTarget}
			additionalParams.data = register:SWORD_PARAMS
			additionalParams.required = 1
			additionalParams.wrap = &no_cache=1
		}
		10.htmlSpecialChars = 1
		10.wrap = <h3 class="csc-searchResultHeader">|</h3>

		20 = COA
		20 {
			10 = TEXT
			10.field = tt_content_bodytext
			10.stripHtml = 1
			10.htmlSpecialChars = 1
		}
		20.stdWrap.crop = 200 | ...
		20.stdWrap.wrap = <p class="csc-searchResult">|</p>
	}

	layout = COA
	layout {
		wrap = <table border="0" cellspacing="0" cellpadding="2" class="csc-searchResultInfo"><tr> | </tr></table> ###RESULT###

		10 = TEXT
		10.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.resultRange
		10.wrap = <td class="csc-searchResultRange"><p>|</p></td>

		20 = TEXT
		20.value = ###PREV###&nbsp;&nbsp;&nbsp;###NEXT###
		20.wrap = <td class="csc-searchResultPrevNext"><p>|</p></td>
	}

	noResultObj = COA
	noResultObj {
		10 = TEXT
		10.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.emptySearch
		10.wrap = <h3 class="csc-noSearchResultMsg">|</h3>
	}

	next = TEXT
	next.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.searchResultNext

	prev = TEXT
	prev.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.searchResultPrev

	target = {$styles.content.searchresult.target}
	range = 20

	stdWrap.prefixComment = 2 | Search result:
}

# Form:
tt_content.search.30 < tt_content.mailform.20
tt_content.search.30 {
	goodMess = {$styles.content.searchform.goodMess}
	redirect >
	recipient >
	data >
	dataArray {
		10.label.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.searchWord
		10.type = sword=input
		20.label.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.searchIn
		20.type = scols=select
		20.valueArray {
			10.label.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.headersKeywords
			10.value = pages.title-subtitle-keywords-description:tt_content.header
			20.label.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.pageContent
			20.value = tt_content.header-bodytext-imagecaption
		}
		30.type = stype=hidden
		30.value = L0
		40.type = submit=submit
		40.value.data = LLL:EXT:css_styled_content/pi1/locallang.xml:search.searchButton
	}
	type.field = pages
	type.listNum = 0
	locationData = HTTP_POST_VARS
	no_cache = 1

	stdWrap.wrap = <table border="0" cellspacing="1" cellpadding="1" class="csc-searchform">  | </table>
	stdWrap {
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.search

		prefixComment = 2 | Search form inserted:
	}
}

# LOGIN
tt_content.login < tt_content.mailform
tt_content.login.10 = < lib.stdheader
tt_content.login.20 {
	goodMess = {$styles.content.loginform.goodMess}
	redirect >
	recipient >
	data >
	dataArray {
		10.label.data = LLL:EXT:css_styled_content/pi1/locallang.xml:login.username
		10.type = *user=input
		20.label.data = LLL:EXT:css_styled_content/pi1/locallang.xml:login.password
		20.type = *pass=password
		30.type = logintype=hidden
		30.value = login
		40.type = submit=submit
		40.value.data = LLL:EXT:css_styled_content/pi1/locallang.xml:login.login
	}
	type.field = pages
	type.listNum = 0
	target = {$styles.content.loginform.target}
	locationData = 0
	hiddenFields.pid = TEXT
	hiddenFields.pid {
		value = {$styles.content.loginform.pid}
		override.field = pages
		override.listNum = 1
	}

	stdWrap.wrap = <div class="csc-loginform"> | </div>
	stdWrap {
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.login

		prefixComment = 2 | Login/Logout form:
	}
}
[loginUser = *]
tt_content.login.20 {
	dataArray >
	dataArray {
		10.label.data = LLL:EXT:css_styled_content/pi1/locallang.xml:login.username
		10.label.wrap = |&nbsp;<!--###USERNAME###-->
		30.type = logintype=hidden
		30.value = logout
		40.type = submit=submit
		40.value.data = LLL:EXT:css_styled_content/pi1/locallang.xml:login.logout
	}
}
[global]

# MENU
tt_content.menu = COA
tt_content.menu {
	10 = < lib.stdheader

	20 = CASE
	20 {
		key.field = menu_type

		# "Menu of these pages"
		default = HMENU
		default {
			special = list
			special.value.field = pages
			wrap = <ul class="csc-menu csc-menu-def">|</ul>
			1 = TMENU
			1 {
				target = {$PAGE_TARGET}
				NO {
					stdWrap.htmlSpecialChars = 1
					wrapItemAndSub = <li>|</li>
					ATagTitle.field = description // title
				}
				noBlur = 1
			}
		}

		# "Menu of subpages to these pages"
		1 < .default
		1 {
			special = directory
			wrap = <ul class="csc-menu csc-menu-1">|</ul>
		}

		# "Sitemap - liststyle"
		2 = HMENU
		2 {
			wrap = <div class="csc-sitemap">|</div>
			1 = TMENU
			1 {
				target = {$PAGE_TARGET}
				noBlur = 1
				expAll = 1
				wrap = <ul>|</ul>
				NO {
					stdWrap.htmlSpecialChars = 1
					wrapItemAndSub = <li>|</li>
					ATagTitle.field = description // title
				}
			}
			2 < .1
			3 < .1
			4 < .1
			5 < .1
			6 < .1
			7 < .1
		}

		# "Section index (pagecontent w/Index checked - liststyle)"
		3 < styles.content.get
		3 {
			wrap = <ul class="csc-menu csc-menu-3">|</ul>
			select.andWhere = sectionIndex!=0
			select.pidInList.override.field = pages
			renderObj = TEXT
			renderObj {
				fieldRequired = header
				trim = 1
				field = header
				htmlSpecialChars = 1
				noBlur = 1
				wrap = <li class="csc-section">|</li>
				typolink.parameter.field = pid
				typolink.section.field = uid
			}
		}

		# "Menu of subpages to these pages (with abstract)"
		4 < .1
		4 {
			wrap = <dl class="csc-menu csc-menu-4">|</dl>
			1.NO {
				wrapItemAndSub >
				linkWrap = <dt>|</dt>
				after {
					data = field : abstract // field : description // field : subtitle
					required = 1
					htmlSpecialChars = 1
					wrap = <dd>|</dd>
				}
				ATagTitle.field = description // title
			}
		}

		# "Recently updated pages"
		5 < .default
		5 {
			wrap = <ul class="csc-menu csc-menu-5">|</ul>
			special = updated
			special {
				maxAge = 3600*24*7
				excludeNoSearchPages = 1
			}
		}

		# "Related pages (based on keywords)"
		6 < .default
		6 {
			wrap = <ul class="csc-menu csc-menu-6">|</ul>
			special = keywords
			special {
				excludeNoSearchPages = 1
			}
		}

		# "Menu of subpages to these pages + sections - liststyle"
		7 < .1
		7 {
			wrap = <ul class="csc-menu csc-menu-7">|</ul>
			1.expAll = 1
			2 < .1
			2 {
				sectionIndex = 1
				sectionIndex.type = header
				wrap = <ul>|</ul>
				NO.wrapItemAndSub = <li class="csc-section">|</li>
			}
		}
	}

	20.stdWrap {
		editIcons = tt_content: menu_type, pages
		editIcons.iconTitle.data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.menuSitemap

		prefixComment = 2 | Menu/Sitemap element:
	}
}

# SHORTCUT
tt_content.shortcut = COA
tt_content.shortcut {

	# Records
	10 = RECORDS
	10 {
		source {
			field = records
		}

		tables = {$styles.content.tables}
	}
}

# LIST
tt_content.list = COA
tt_content.list {

	# Header
	10 =< lib.stdheader

	# Plugin
	20 = CASE
	20 {
		key {
			field = list_type
		}
	}
}

# DIVIDER
tt_content.div = COA
tt_content.div {

	# Wrap
	stdWrap {
		wrap = <div class="csc-divider">|</div>
	}

	# Divider
	10 = TEXT
	10 {
		value = <hr />
	}
}

# HTML
tt_content.html = COA
tt_content.html {
	10 = TEXT
	10 {
		field = bodytext
	}
}


# DEFAULT
tt_content.default = COA
tt_content.default {
	stdWrap {
		wrap = <p>|</p>
	}

	10 = TEXT
	10 {
		stdWrap {
			wrap = Content element type "|" has no rendering definition!
		}

		field = CType
	}
}

# STYLES
plugin.tx_hypehtml5._CSS_DEFAULT_STYLE (

	/* HTML5 */
	article, aside, details, figcaption, figure,
	footer, header, hgroup, menu, nav, section {
		display: block;
	}

	audio, canvas, video {
		display: inline-block;
	}

	audio:not([controls]) {
		display: none;
	}

	[hidden] {
		display: none;
	}

	/* Content */
	.clearfix:before,
	.clearfix:after,
	.csc-default:before,
	.csc-default:after {
		content: "\0020";
		display: block;
		height: 0;
		overflow: hidden;
	}
	.clearfix:after,
	.csc-default:after {
		clear: both;
	}
	.clearfix,
	.csc-default {
		zoom: 1;
	}

	/* Headers */
	.csc-header,
	.csc-subheader,
	.csc-date {
		text-align: left;
	}
	.csc-alignment-center .csc-header,
	.csc-alignment-center .csc-subheader,
	.csc-alignment-center .csc-date {
		text-align: center;
	}
	.csc-alignment-right .csc-header,
	.csc-alignment-right .csc-subheader,
	.csc-alignment-right .csc-date {
		text-align: right;
	}

	.csc-header a {
		display: block;
	}

	/* Image */
	.csc-image {
		display: block;
		margin-bottom: {$styles.content.imgtext.rowSpace}px;
	}
	.csc-image img {
		display: block;
	}
	.csc-row .csc-image {
		float: left;
	}

	/* Image, left */
	.csc-orientation-left .csc-image,
	.csc-orientation-lefttop .csc-image,
	.csc-orientation-leftbottom .csc-image,
	.csc-orientation-floatleft .csc-image {
		margin-right: {$styles.content.imgtext.colSpace}px;
	}

	/* Image, right */
	.csc-orientation-right .csc-image,
	.csc-orientation-righttop .csc-image,
	.csc-orientation-rightbottom .csc-image,
	.csc-orientation-floatright .csc-image {
		margin-left: {$styles.content.imgtext.colSpace}px;
	}

	/* Image, center */
	.csc-orientation-centertop .csc-image,
	.csc-orientation-centerbottom .csc-image {
		margin-left: {$styles.content.imgtext.colSpace}px;
	}

	/* Image, left of text */
	.csc-orientation-left .csc-imagewrap,
	.csc-orientation-floatleft .csc-imagewrap {
		margin-right: {$styles.content.imgtext.textMargin}px;
	}

	/* Image, right of text */
	.csc-orientation-right .csc-imagewrap,
	.csc-orientation-floatright .csc-imagewrap {
		margin-left: {$styles.content.imgtext.textMargin}px;
	}

	/* Orientation, center */
	.csc-orientation-centertop,
	.csc-orientation-centerbottom {
		text-align: center;
	}
	.csc-orientation-centertop .csc-imagewrap,
	.csc-orientation-centerbottom .csc-imagewrap {
		display: inline-block;
	}
	.csc-orientation-centertop .csc-image,
	.csc-orientation-centerbottom .csc-image,
	.csc-orientation-centertop .csc-text,
	.csc-orientation-centerbottom .csc-text {
		text-align: left;
	}

	/* Wrap, right */
	.csc-orientation-righttop .csc-imagewrap,
	.csc-orientation-rightbottom .csc-imagewrap,
	.csc-orientation-right .csc-imagewrap,
	.csc-orientation-floatright .csc-imagewrap {
		float: right;
	}
	.csc-orientation-righttop .csc-text,
	.csc-orientation-rightbottom .csc-text {
		clear: right;
	}

	/* Wrap, left */
	.csc-orientation-lefttop .csc-imagewrap,
	.csc-orientation-leftbottom .csc-imagewrap,
	.csc-orientation-left .csc-imagewrap,
	.csc-orientation-floatleft .csc-imagewrap {
		float: left;
	}
	.csc-orientation-lefttop .csc-text,
	.csc-orientation-leftbottom .csc-text {
		clear: left;
	}

	/* Text */
	.csc-orientation-left .csc-text,
	.csc-orientation-right .csc-text {
		overflow: hidden;
	}

	/* Column */
	.csc-imagewrap .csc-column {
		float: left;
	}
	.csc-imagewrap .csc-column-first {
		margin-left: 0;
	}
	.csc-imagewrap .csc-column-last {
		margin-right: 0;
	}

	/* Row */
	.csc-imagewrap .csc-row {
		overflow: hidden;
	}

	/* Caption */
	.csc-caption {
		text-align: left;
	}
	.csc-alignment-center .csc-caption {
		text-align: center;
	}
	.csc-alignment-right .csc-caption {
		text-align: right;
	}

	/* Anchor */
	.csc-anchor {
		clear: both;
	}

	/* Legacy */
	.ie6 audio, .ie6 video, .ie6 canvas,
	.ie7 audio, .ie7 video, .ie7 canvas {
		display: inline;
		zoom: 1;
	}

	.ie6 .csc-orientation-centertop .csc-imagewrap,
	.ie6 .csc-orientation-centerbottom .csc-imagewrap,
	.ie7 .csc-orientation-centertop .csc-imagewrap,
	.ie7 .csc-orientation-centerbottom .csc-imagewrap {
		display: inline;
		zoom: 1;
	}
)