# HTML5 Content Rendering

# Includes
includeLibs {
	tx_hypehtml5 = EXT:hype_html5/Classes/class.tx_hypehtml5.php
}

# Content
styles {
	content >
	content {

		# Normal
		get = CONTENT
		get {
			table = tt_content

			select {
				orderBy = sorting
				where = colPos=0
				languageField = sys_language_uid
			}
		}

		# Left
		getLeft < .get
		getLeft {
			select {
				where = colPos=1
			}
		}

		# Right
		getRight < .get
		getRight {
			select {
				where = colPos=2
			}
		}

		# Border
		getBorder < .get
		getBorder {
			select {
				where = colPos=3
			}
		}

		# Panel
		editPanelPage = COA
		editPanelPage {
			10 = EDITPANEL
			10 {
				allow = toolbar, move, hide

				label {
					data = LLL:EXT:hype_html5/Resources/Private/Language/locallang.xml:edit.page
					wrap = |&nbsp;<strong>%s</strong>
				}
			}
		}
	}
}

# Library
lib {

	# Parse Function
	parseFunc {
		makelinks = 1
		makelinks.http.keep = {$styles.content.links.keep}
		makelinks.http.extTarget = {$styles.content.links.extTarget}
		makelinks.mailto.keep = path
		tags {
			link = TEXT
			link {
				current = 1
				typolink.parameter.data = parameters : allParams
				typolink.extTarget = {$styles.content.links.extTarget}
				typolink.target = {$styles.content.links.target}
				parseFunc.constants =1
			}
		}
		allowTags = {$styles.content.links.allowTags}
		denyTags = *
		sword = <span class="csc-sword">|</span>
		constants = 1

		nonTypoTagStdWrap.HTMLparser = 1
		nonTypoTagStdWrap.HTMLparser {
			keepNonMatchedTags = 1
			htmlSpecialChars = 2
		}
	}

	# RTE Parse Function
	parseFunc_RTE < .parseFunc
	parseFunc_RTE {
		//  makelinks >
		# Processing <table> and <blockquote> blocks separately
		externalBlocks = article, aside, blockquote, div, dd, dl, footer, header, nav, ol, section, table, ul
		externalBlocks {
			# The blockquote content is passed into parseFunc again...
			blockquote.stripNL=1
			blockquote.callRecursive=1
			blockquote.callRecursive.tagStdWrap.HTMLparser = 1
			blockquote.callRecursive.tagStdWrap.HTMLparser.tags.blockquote.overrideAttribs = style="margin-bottom:0;margin-top:0;"

			ol.stripNL=1
			ol.stdWrap.parseFunc = < lib.parseFunc

			ul.stripNL=1
			ul.stdWrap.parseFunc = < lib.parseFunc

			table.stripNL=1
			table.stdWrap.HTMLparser = 1
			table.stdWrap.HTMLparser.tags.table.fixAttrib.class {
				default = contenttable
				always = 1
				list = contenttable
			}
			table.stdWrap.HTMLparser.keepNonMatchedTags = 1
			table.HTMLtableCells=1
			table.HTMLtableCells {
				default.stdWrap {
					parseFunc =< lib.parseFunc_RTE
					parseFunc.nonTypoTagStdWrap.encapsLines.nonWrappedTag =
				}
				addChr10BetweenParagraphs=1
			}
			div.stripNL = 1
			div.callRecursive = 1

			article < .div
			aside < .div
			footer < .div
			header < .div
			nav < .div
			section < .div
			dl < .div
			dd < .div
		}
		nonTypoTagStdWrap.encapsLines {
			encapsTagList = cite,div,p,pre,h1,h2,h3,h4,h5,h6,blockquote
			remapTag.DIV = P
			nonWrappedTag = P
			innerStdWrap_all.ifBlank = &nbsp;
			#addAttributes.P.class = bodytext
			addAttributes.P.class.setOnly=blank
		}
		nonTypoTagStdWrap.HTMLparser = 1
		nonTypoTagStdWrap.HTMLparser {
			keepNonMatchedTags = 1
			htmlSpecialChars = 2
		}
	}

	# Header
	stdheader = COA
	stdheader {

		# Wrap
		stdWrap {
			innerWrap {

				cObject = COA
				cObject {

					# Opening tag
					10 = TEXT
					10 {
						value = <header
					}

					# Class attribute
					20 = COA
					20 {
						stdWrap {
							noTrimWrap = | class="|"|
							required = 1
						}

						# Alignment
						10 = TEXT
						10 {
							stdWrap {
								wrap = csc-alignment-|
								required = 1
							}

							field = header_position
						}
					}

					# Closing tag
					30 = TEXT
					30 {
						value = >|</header>
					}
				}
			}

			required = 1

			if {
				equals {
					field = header_layout
				}

				value = 100
				negate = 1
			}
		}

		# Group
		10 = COA
		10 {

			# Wrap
			stdWrap {
				wrap = <hgroup>|</hgroup>
				wrap {
					fieldRequired = subheader
				}

				required = 1
			}

			# Header
			10 = CASE
			10 {
				key {
					field = header_layout

					ifEmpty = {$content.defaultHeaderType}
					ifEmpty {
						override.data = register:defaultHeaderType
					}
				}

				# H1
				default = COA
				default {
					wrap = <h1 class="csc-header">|</h1>

					# Text
					10 = TEXT
					10 {
						field = header

						htmlSpecialChars = 1
						brTag = <br />

						typolink {
							parameter {
								field = header_link
							}
						}
					}

					# Permalink
					20 = COA
					20 {
						stdWrap {
							noTrimWrap = | ||
							required = 1
						}

						# Link
						10 = TEXT
						10 {
							value = {$content.permalink.placeholder}
							value {
								htmlSpecialChars = 1
							}

							typolink {
								parameter {
									data = TSFE:id
								}

								section = c{field:uid}
								section {
									insertData = 1
								}

								ATagParams = class="csc-permalink"
								ATagParams {
									insertData = 1
								}
							}
						}

						if {
							isTrue = {$content.permalink}
						}
					}
				}

				# H2
				2 < .default
				2.wrap = <h2 class="csc-header">|</h2>

				# H3
				3 < .default
				3.wrap = <h3 class="csc-header">|</h3>

				# H4
				4 < .default
				4.wrap = <h4 class="csc-header">|</h4>

				# H5
				5 < .default
				5.wrap = <h5 class="csc-header">|</h5>

				if.isTrue.field = header
			}

			# Subheader
			20 = CASE
			20 {
				key {
					field = header_layout

					ifEmpty = {$content.defaultHeaderType}
					ifEmpty {
						override.data = register:defaultHeaderType
					}
				}

				default = TEXT
				default {
					wrap = <h2 class="csc-subheader">|</h2>

					htmlSpecialChars = 1
					brTag = <br />

					field = subheader
				}

				1 < .default

				2 < .default
				2.wrap = <h3 class="csc-subheader">|</h3>

				3 < .default
				3.wrap = <h4 class="csc-subheader">|</h4>

				4 < .default
				4.wrap = <h5 class="csc-subheader">|</h5>

				5 < .default
				5.wrap = <h6 class="csc-subheader">|</h6>

				if.isTrue.field = subheader
			}
		}

		# Date
		20 = COA
		20 {
			stdWrap {
				wrap = <p class="csc-date">|</p>

				innerWrap {
					cObject = COA
					cObject {

						10 = TEXT
						10 {
							value = <time
						}

						20 = TEXT
						20 {
							noTrimWrap = | datetime="|"|

							field = date
							strftime = %Y-%m-%d
						}

						30 = TEXT
						30 {
							value = >|</time>
						}
					}
				}

				required = 1
			}

			10 = TEXT
			10 {
				field = date
				strftime = %x
			}

			if.isTrue.field = date
		}
	}
}

# Content
tt_content >
tt_content = CASE
tt_content {

	# Key
	key {
		field = CType
	}

	# Wrap
	stdWrap {
		required = 1

		innerWrap {

			cObject = COA
			cObject {

				# Wrap
				10 = CASE
				10 {

					# Key
					key {
						field = CType
					}

					# Default wrap
					default = COA
					default {
						# Opening tag
						10 = TEXT
						10 {
							value = <section id="c{field:uid}"
							insertData = 1
						}

						# Class attribute
						20 = COA
						20 {
							stdWrap {
								noTrimWrap = | class="|"|
								required = 1
							}

							# Default
							10 = TEXT
							10 {
								value = csc-default
							}

							# Content
							20 = TEXT
							20 {
								stdWrap {
									noTrimWrap = | csc-content-||
								}

								field = CType
							}

							# Plugin
							30 = TEXT
							30 {
								stdWrap {
									noTrimWrap = | csc-plugin-||
									required = 1
								}

								field = list_type

								if {
									equals = list
									value.field = CType
									isTrue.field = list_type
								}
							}

							# Layout
							40 = TEXT
							40 {
								stdWrap {
									noTrimWrap = | csc-layout-||
								}

								field = layout

								if {
									isTrue.field = layout
								}
							}

							# Frame
							50 = TEXT
							50 {
								stdWrap {
									noTrimWrap = | csc-frame-||
								}

								field = section_frame

								if {
									isTrue.field = section_frame
								}
							}

							# Image orientation
							60 = COA
							60 {
								stdWrap {
									noTrimWrap = | csc-orientation-||
								}

								10 = CASE
								10 {
									key {
										field = imageorient
									}

									# 0: Above, center
									default = TEXT
									default {
										value = centertop
									}

									# 1 Above, right
									1 < .default
									1.value = righttop

									# 2 Above, left
									2 < .default
									2.value = lefttop

									# 8 Below, center
									8 < .default
									8.value = centerbottom

									# 9 Below, right
									9 < .default
									9.value = rightbottom

									# 10 Below, left
									10 < .default
									10.value = leftbottom

									# 17 In text, right
									17 < .default
									17.value = floatright

									# 18 In text, left
									18 < .default
									18.value = floatleft

									# 25 Beside Text, Right
									25 < .default
									25.value = right

									# 26 Beside Text, Left
									26 < .default
									26.value = left
								}

								if {
									value = image,textpic
									isInList.field = CType
								}
							}

							# Margin Top
							70 = USER
							70 {
								stdWrap {
									noTrimWrap = | csc-space-before-||
								}

								userFunc = tx_hypehtml5->renderSpace
								space = before
								constant = {$content.spaceBefore}
							}

							# Margin Bottom
							71 = USER
							71 {
								stdWrap {
									noTrimWrap = | csc-space-after-||
								}

								userFunc = tx_hypehtml5->renderSpace
								space = after
								constant = {$content.spaceAfter}
							}
						}

						# Closing tag
						30 = COA
						30 {

							10 = TEXT
							10 {
								value = >|
							}

							# Anchor
							20 = TEXT
							20 {
								value = <p class="csc-anchor"><a href="#">{LLL:EXT:hype_html5/Resources/Private/Language/locallang.xml:label.anchor}</a></p>
								fieldRequired = linkToTop
								insertData = 1
							}

							30 = TEXT
							30 {
								value = </section>
							}
						}
					}

					# Header
					header = TEXT
					header {
						value = |
					}

					# Menu
					menu < .default
					menu {
						20.25 = TEXT
						20.25 {
							stdWrap {
								noTrimWrap = | csc-menu-||
							}

							field = menu_type
						}
					}

					# Insert Records
					shortcut < .default
					shortcut {

						# Opening tag
						10.value = <div id="c{field:uid}"

						# Class attribute
						20.20.stdWrap.noTrimWrap = | csc-||

						# Closing Tag
						30.30.value = </div>
					}

					# Divider
					div < .default
					div {

						# Opening tag
						10.value = <div id="c{field:uid}"

						# Class attribute
						20.20.stdWrap.noTrimWrap = | csc-||

						# Closing Tag
						30.30.value = </div>
					}

					# HTML
					html < .default
					html {

						# Opening tag
						10.value = <div id="c{field:uid}"

						# Class attribute
						20.20.stdWrap.noTrimWrap = | csc-||

						# Closing Tag
						30.30.value = </div>
					}
				}
			}
		}
	}
}

# Elements
tt_content {

	# Header
	header = COA
	header {

		# Header
		10 =< lib.stdheader
		10 {
			# Wrap
			stdWrap {
				innerWrap {
					cObject {

						# id attribute
						15 = TEXT
						15 {
							noTrimWrap = | id="c|"|
							field = uid
						}

						# class attribute
						20 {
							# wrapper class names
							5 < tt_content.stdWrap.innerWrap.cObject.10.default.20
							5 {
								stdWrap >
								stdWrap {
									noTrimWrap = || |
								}
							}
						}
					}
				}
			}
		}
	}

	# Text
	text = COA
	text {

		# Header
		10 =< lib.stdheader

		# Text
		20 = TEXT
		20 {
			field = bodytext
			required = 1

			parseFunc =< lib.parseFunc_RTE
		}
	}

	# Image
	image = COA
	image {

		# Header
		10 =< lib.stdheader

		# Images
		20 = USER
		20 {
			userFunc = tx_hypehtml5->render_textpic

			imgList.field = image
			imgPath = uploads/pics/

			imgObjNum = 1
			1 {
				file {
					import.current = 1
					width.field = imagewidth
				}

				imageLinkWrap = 1
				imageLinkWrap {
					bodyTag = <body style="margin:0; background:#fff;">
					wrap = <a href="javascript:close();"> | </a>
					width = {$styles.content.imgtext.linkWrap.width}
					height = {$styles.content.imgtext.linkWrap.height}
					effects = {$styles.content.imgtext.linkWrap.effects}

					JSwindow = 1
					JSwindow {
						newWindow = {$styles.content.imgtext.linkWrap.newWindow}
						if.isFalse = {$styles.content.imgtext.linkWrap.lightboxEnabled}
					}

					directImageLink = {$styles.content.imgtext.linkWrap.lightboxEnabled}

					enable {
						field = image_zoom

						ifEmpty {
							typolink.parameter.field = image_link
							typolink.parameter.listNum.splitChar = 10
							typolink.parameter.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
							typolink.returnLast = url
						}
					}

					typolink {
						parameter {
							field = image_link
							listNum.splitChar = 10
							listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
						}

						target = {$styles.content.links.target}
						extTarget = {$styles.content.links.extTarget}
					}

					linkParams.ATagParams.dataWrap = class="{$styles.content.imgtext.linkWrap.lightboxCssClass}" rel="{$styles.content.imgtext.linkWrap.lightboxRelAttribute}"
				}

				altText = TEXT
				altText {
					field = altText
					stripHtml = 1
					split.token.char = 10
					split.token.if.isTrue = {$styles.content.imgtext.imageTextSplit}
					split.returnKey.data = register : IMAGE_NUM_CURRENT
				}

				titleText < .altText
				titleText.field = titleText

				emptyTitleHandling = {$styles.content.imgtext.emptyTitleHandling}
				titleInLink = {$styles.content.imgtext.titleInLink}
				titleInLinkAndImg = {$styles.content.imgtext.titleInLinkAndImg}
			}

			textPos.field = imageorient
			maxW = {$styles.content.imgtext.maxW}
			maxW.override.data = register:maxImageWidth
			maxWInText = {$styles.content.imgtext.maxWInText}
			maxWInText.override.data = register:maxImageWidthInText

			equalH.field = imageheight

			image_compression.field = image_compression
			image_effects.field = image_effects

			noRows.field = image_noRows

			cols.field = imagecols
			border.field = imageborder

			caption {
				1 = TEXT
				1 {
					field = imagecaption
					required = 1
					parseFunc =< lib.parseFunc
					split.token.char = 10
					split.token.if.isPositive = {$styles.content.imgtext.imageTextSplit} + {$styles.content.imgtext.captionSplit}
					split.returnKey.data = register : IMAGE_NUM_CURRENT
				}
			}

			# captionSplit is deprecated, use imageTextSplit instead
			captionSplit = {$styles.content.imgtext.captionSplit}
			captionAlign.field = imagecaption_position
			# caption/alttext/title/longdescURL splitting
			imageTextSplit = {$styles.content.imgtext.imageTextSplit}

			#borderCol = {$styles.content.imgtext.borderColor}
			#borderThick = {$styles.content.imgtext.borderThick}
			#borderClass = {$styles.content.imgtext.borderClass}
			colSpace = {$styles.content.imgtext.colSpace}
			rowSpace = {$styles.content.imgtext.rowSpace}
			textMargin = {$styles.content.imgtext.textMargin}

			#borderSpace = {$styles.content.imgtext.borderSpace}
			separateRows = {$styles.content.imgtext.separateRows}

			addClasses =
			addClassesImage =
			addClassesImage {
				ifEmpty = csc-image-first csc-image-last

				override = csc-image-first |*| |*| csc-image-last
				override {
					if {
						isGreaterThan.field = imagecols
						value = 1
					}
				}
			}

			imageStdWrap {
				stdWrap {
					innerWrap {
						cObject = COA
						cObject {

							# Opening tag
							10 = TEXT
							10 {
								value = <div
							}

							# Class attribute
							20 = COA
							20 {
								stdWrap {
									noTrimWrap = | class="csc-imagewrap|"|
								}

								# Caption alignment
								10 = TEXT
								10 {
									stdWrap {
										noTrimWrap = | csc-alignment-||
										fieldRequired = imagecaption_position
									}

									field = imagecaption_position
								}

								# Border
								20 = TEXT
								20 {
									stdWrap {
										noTrimWrap = | ||
										required = 1
									}

									value = csc-border
									fieldRequired = imageborder
								}

								# Effects
								30 = TEXT
								30 {
									stdWrap {
										noTrimWrap = | csc-effect-||
										fieldRequired = image_effects
									}

									field = image_effects
								}

								# Compression
								40 = TEXT
								40 {
									stdWrap {
										noTrimWrap = | csc-quality-||
										fieldRequired = image_compression
									}

									field = image_compression
								}
							}

							# Closing tag
							30 = TEXT
							30 {
								value = >|</div>
							}
						}
					}
				}
			}

			imageStdWrapNoWidth < .imageStdWrap

			# if noRows is set, wrap around each column:
			imageColumnStdWrap.dataWrap = <div class="csc-column">|</div>

			layout = CASE
			layout {
				key.field = imageorient

				# top
				default = TEXT
				default {
					value = ###IMAGES######TEXT###
				}

				# bottom
				8 = TEXT
				8.value = ###TEXT######IMAGES###
				9 < .8
				10 < .8
			}

			rendering {

				# Default
				default {
					fallbackRendering = COA
					fallbackRendering {

						# Global caption
						10 = TEXT
						10 {
							if {
								value = 1
								isGreaterThan.data = register:imageCount
								isTrue.if.isTrue.data = register:renderGlobalCaption
								isTrue.field = imagecaption
							}

							value = extended
						}
					}

					imageRowStdWrap.dataWrap = <div class="csc-row">|</div>
					imageLastRowStdWrap.dataWrap = <div class="csc-row csc-row-last">|</div>
					noRowsStdWrap.wrap = |
					oneImageStdWrap.dataWrap = <figure class="csc-image###CLASSES###">|</figure>
					imgTagStdWrap.wrap = |

					caption {
						required = 1
						wrap = <figcaption class="csc-caption">|</figcaption>

						typolink {
							parameter {
								field = longdescURL

								listNum {
									stdWrap {
										data = register:IMAGE_NUM_CURRENT
									}

									splitChar = 10
								}
							}

							target = {$styles.content.links.target}
							extTarget = {$styles.content.links.extTarget}
						}
					}
				}

				extended {
					imageRowStdWrap.dataWrap = <div class="csc-row">|</div>
					imageLastRowStdWrap.dataWrap = <div class="csc-row csc-row-last">|</div>
					noRowsStdWrap.wrap = |
					oneImageStdWrap.dataWrap = <div class="csc-image###CLASSES###">|</div>
					imgTagStdWrap.wrap = |

					imageStdWrap < tt_content.image.20.imageStdWrap
					imageStdWrap.stdWrap.innerWrap.cObject {

						# Opening tag
						10.value = <figure

						# Closing tag
						30.value = >|</figure>
					}

					caption < tt_content.image.20.rendering.default.caption
					caption.br = 1
				}
			}

			renderMethod = default
		}
	}

	# Text/Image
	textpic = COA
	textpic {

		# Header
		10 = COA
		10 {
			if {
				value = 25
				isLessThan.field = imageorient
			}

			10 =< lib.stdheader
		}

		# Content
		20 =< tt_content.image.20
		20 {
			text {
				wrap = <div class="csc-text">|</div>

				# Header
				10 = COA
				10 {
					if {
						value = 24
						isGreaterThan.field = imageorient
					}

					10 =< lib.stdheader
				}

				# Text
				20 =< tt_content.text.20
			}
		}
	}

	# Bullets
	bullets = COA
	bullets {

		# Header
		10 =< lib.stdheader

		# Bullets
		20 = COA
		20 {
			stdWrap {
				wrap = <ul>|</ul>
				required = 1
			}

			# Items
			10 = TEXT
			10 {
				field = bodytext

				trim = 1

				split {
					token {
						char = 10
					}

					cObjNum = |*|1||2|*|

					# Odd bullet
					1 {
						dataWrap = <li id="c{field:uid}:{register:SPLIT_COUNT}" class="csc-odd">|</li>
						required = 1

						current = 1
						trim = 1
						parseFunc =< lib.parseFunc
					}

					# Even bullet
					2 < .1
					2 {
						dataWrap = <li id="c{field:uid}:{register:SPLIT_COUNT}" class="csc-even">|</li>
					}
				}
			}
		}
	}

	# Table
	table = COA
	table {

		# Header
		10 =< lib.stdheader

		# Table
		20 = USER
		20 {
			userFunc = tx_hypehtml5->render_table
			field = bodytext

			# Cell Wrap
			innerStdWrap {
				wrap = |
				parseFunc =< lib.parseFunc
			}

			# Color
			color {
				default =
				1 = {$styles.content.table.backgroundColor.1}
				2 = {$styles.content.table.backgroundColor.2}
				200 =
				240 = {$styles.content.table.backgroundColor.240}
				241 = {$styles.content.table.backgroundColor.241}
				242 = {$styles.content.table.backgroundColor.242}
				243 = {$styles.content.table.backgroundColor.243}
				244 = {$styles.content.table.backgroundColor.244}
			}
		}
	}

	# Uploads
	uploads = COA
	uploads {

		# Header
		10 =< lib.stdheader

		# Files
		20 = USER
		20 {
			userFunc = tx_hypehtml5->render_uploads
			field = media
			filePath.field = select_key

			outerWrap = <dl>|</dl>

			itemRendering = COA
			itemRendering {

				# File
				10 = COA
				10 {
					stdWrap {
						wrap = <dt id="c{field:uid}:{register:filename}" class="csc-odd csc-file-{register:fileExtension}">|</dt> |*| <dt id="c{field:uid}:{register:filename}" class="csc-even csc-file-{register:fileExtension}">|</dt> || <dt id="c{field:uid}:{register:filename}" class="csc-odd csc-file-{register:fileExtension}">|</dt> |*|
						insertData = 1
					}

					# Icon
					10 = TEXT
					10 {
						data = register:linkedIcon
						noTrimWrap = |<span class="csc-icon">|</span> |
						if.isPositive.field = layout
					}

					# Link
					20 = COA
					20 {
						wrap = |

						1 = TEXT
						1 {
							data = register:linkedLabel
							wrap = |
						}
					}

					# Size
					30 = TEXT
					30 {
						data = register:fileSize

						noTrimWrap = | <span class="csc-file-size">|</span>|

						bytes = 1
						bytes {
							labels = {$styles.content.uploads.filesizeBytesLabels}
						}

						if.isTrue.field = filelink_size
					}
				}

				# Description
				20 = COA
				20 {
					stdWrap {
						wrap = <dd class="csc-odd csc-description">|</dd> |*| <dd class="csc-even csc-description">|</dd> || <dd class="csc-odd csc-description">|</dd> |*|
					}

					10 = TEXT
					10 {
						value = &#8203;

						override {
							cObject = TEXT
							cObject {
								data = register:description
							}
						}
					}
				}
			}

			useSpacesInLinkText = 0
			stripFileExtensionFromLinkText = 0

			linkProc {
				target = _blank
				jumpurl = {$styles.content.uploads.jumpurl}
				jumpurl.secure = {$styles.content.uploads.jumpurl_secure}
				jumpurl.secure.mimeTypes = {$styles.content.uploads.jumpurl_secure_mimeTypes}
				removePrependedNumbers = 1

				iconCObject = IMAGE
				iconCObject.file.import.data = register:ICON_REL_PATH
				iconCObject.file.width = 150
			}

			filesize {
				bytes = 1
				bytes.labels = {$styles.content.uploads.filesizeBytesLabels}
			}
		}
	}

	# Menu
	menu = COA
	menu {

		# Header
		10 =< lib.stdheader

		# Menu
		20 = CASE
		20 {
			key.field = menu_type

			# Menu of Pages
			default = HMENU
			default {
				special = list
				special {
					value.field = pages
				}

				wrap = <ul>|</ul>

				1 = TMENU
				1 {
					target = {$PAGE_TARGET}

					NO {
						wrapItemAndSub = <li>|</li>
						stdWrap.htmlSpecialChars = 1
						ATagTitle.field = description // title
					}

					noBlur = 1
				}
			}

			# Menu of Subpages
			1 < .default
			1 {
				special = directory
			}

			# Sitemap
			2 = HMENU
			2 {
				wrap = <ul>|</ul>

				1 = TMENU
				1 {
					target = {$PAGE_TARGET}

					noBlur = 1
					expAll = 1

					NO {
						wrapItemAndSub = <li>|</li>
						stdWrap.htmlSpecialChars = 1
						ATagTitle.field = description // title
					}
				}

				2 < .1
				2 {
					wrap = <ul>|</ul>
				}

				3 < .2
				4 < .2
				5 < .2
				6 < .2
				7 < .2
				8 < .2
				9 < .2
			}

			# Section Index
			3 < styles.content.get
			3 {
				select {
					andWhere = sectionIndex!=0
					pidInList.override.field = pages
				}

				renderObj = TEXT
				renderObj {
					wrap = <li>|</li>

					field = header
					fieldRequired = header

					trim = 1
					htmlSpecialChars = 1
					noBlur = 1

					typolink.parameter.field = pid
					typolink.section.field = uid
				}
			}

			# Menu of Subpages with Abstract
			4 < .1
			4 {
				wrap = <dl>|</dl>

				1.NO {
					wrapItemAndSub >

					linkWrap = <dt>|</dt>

					after {
						wrap = <dd>|</dd>

						data = field : abstract // field : description // field : subtitle
						data.htmlSpecialChars = 1

						ifEmpty = &#8203;
					}

					ATagTitle.field = description // title
				}
			}

			# Updates Pages
			5 < .default
			5 {
				special = updated
				special {
					maxAge = 3600*24*7
					excludeNoSearchPages = 1
				}
			}

			# Related Pages
			6 < .default
			6 {
				special = keywords
				special {
					excludeNoSearchPages = 1
				}
			}

			# Menu of Subpages with Sections
			7 < .1
			7 {
				1.expAll = 1

				2 < .1
				2 {
					wrap = <ul class="csc-menu-sections">|</ul>

					sectionIndex = 1
					sectionIndex.type = header

					NO.wrapItemAndSub = <li>|</li>
				}
			}
		}
	}

	# Multimedia
	multimedia = COA
	multimedia {

		# Header
		10 =< lib.stdheader

		# Object
		20 = MULTIMEDIA
		20 {
			file {
				wrap = uploads/media/
				field = multimedia
				listNum = 0
			}

			params.field = bodytext
		}
	}

	# SWF Object
	swfobject = COA
	swfobject {

		# Header
		10 =< lib.stdheader

		# Object
		20 = SWFOBJECT
		20 {
			file =
			width =
			height =

			alternativeContent.field = bodytext
			flexParams.field = pi_flexform

			layout = ###SWFOBJECT###

			video {
				player = {$styles.content.media.videoPlayer}

				defaultWidth = {$styles.content.media.defaultVideoWidth}
				defaultHeight = {$styles.content.media.defaultVideoHeight}

				default {
					params {
						quality = high
						menu = false
						allowScriptAccess = sameDomain
						allowFullScreen = true
					}
				}

				mapping {

				}
			}

			audio {
				player = {$styles.content.media.audioPlayer}

				defaultWidth = {$styles.content.media.defaultAudioWidth}
				defaultHeight = {$styles.content.media.defaultAudioHeight}

				default {
					params {
						quality = high
						allowScriptAccess = sameDomain
						menu = false
					}
				}

				mapping {
					flashvars {
						file = soundFile
					}
				}
			}
		}
	}

	# QT Object
	qtobject = COA
	qtobject {

		# Header
		10 =< lib.stdheader

		# Object
		20 = QTOBJECT
		20 {
			file =
			width =
			height =

			flexParams.field = pi_flexform
			alternativeContent.field = bodytext

			layout = ###QTOBJECT###

			video {
				player = {$styles.content.media.videoPlayer}

				defaultWidth  = {$styles.content.media.defaultVideoWidth}
				defaultHeight  = {$styles.content.media.defaultVideoHeight}

				default {
					params {
						quality = high
						menu = false
						allowScriptAccess = sameDomain
						allowFullScreen = true
					}
				}

				mapping {

				}
			}

			audio {
				player = {$styles.content.media.audioPlayer}

				defaultWidth = {$styles.content.media.defaultAudioWidth}
				defaultHeight = {$styles.content.media.defaultAudioHeight}

				default {
					params {
						quality = high
						allowScriptAccess = sameDomain
						menu = false
					}
				}

				mapping {
					flashvars {
						file = soundFile
					}
				}
			}
		}
	}

	# Media
	media = COA
	media {

		# Header
		10 =< lib.stdheader

		# Media
		20 = MEDIA
		20 {
			flexParams.field = pi_flexform
			alternativeContent < tt_content.text.20
			alternativeContent {
				field = bodytext
			}

			type = video
			renderType = auto
			allowEmptyUrl = 0
			forcePlayer = 1

			fileExtHandler {
				default = MEDIA
				avi = MEDIA
				asf = MEDIA
				class = MEDIA
				wmv = MEDIA
				mp3 = SWF
				mp4 = SWF
				m4v = SWF
				swa = SWF
				flv = SWF
				swf = SWF
				mov = QT
				m4v = QT
				m4a = QT
			}

			mimeConf {
				swfobject < tt_content.swfobject.20
				qtobject < tt_content.qtobject.20
				flowplayer < tt_content.swfobject.20
				flowplayer {
					audio.player = {$styles.content.media.flowPlayer}
					video.player = {$styles.content.media.flowPlayer}
				}
			}
		}
	}

	# Shortcut
	shortcut = COA
	shortcut {

		# Records
		20 = CASE
		20 {
			key {
				field = layout
			}

			0 = RECORDS
			0 {
				source.field = records
				tables = {$content.shortcut.tables}
			}

			1 = RECORDS
			1 {
				source.field = records
				tables = {$content.shortcut.tables}
			}
		}
	}

	# Mailform
	mailform = COA
	mailform {

		# Header
		10 =< lib.stdheader
		10 {
			10.20 >
		}

		# Form
		20 = FORM
		20 {
			stdWrap {
				wrap = <fieldset class="csc-mailform">|</fieldset>
				required = 1
			}

			accessibility = 1
			noWrapAttr = 1
			formName = mailform
			dontMd5FieldNames = 1

			layout = <div class="csc-mailform-field">###LABEL### ###FIELD###</div>

			labelWrap.wrap = |
			commentWrap.wrap = |
			radioWrap.wrap = |<br />
			radioWrap.accessibilityWrap = <fieldset###RADIO_FIELD_ID###><legend>###RADIO_GROUP_LABEL###</legend>|</fieldset>
			hiddenFields.stdWrap.wrap = <div style="display:none;">|</div>

			REQ = 1
			REQ.labelWrap.wrap = |
			COMMENT.layout = <div class="csc-mailform-label">###LABEL###</div>
			RADIO.layout = <div class="csc-mailform-field">###LABEL### <span class="csc-mailform-radio">###FIELD###</span></div>
			LABEL.layout = <div class="csc-mailform-field">###LABEL### <span class="csc-mailform-label">###FIELD###</span></div>

			target = {$styles.content.mailform.target}
			goodMess = {$styles.content.mailform.goodMess}
			badMess = {$styles.content.mailform.badMess}

			redirect.field = pages
			redirect.listNum = 0

			recipient.field = subheader
			data.field = bodytext
			locationData = 1

			params {
				radio = class="csc-mailform-radio"
				check = class="csc-mailform-check"
				submit = class="csc-mailform-submit"
			}
		}
	}

	# List
	list = COA
	list {

		# Header
		10 =< lib.stdheader

		# Plugin
		20 = CASE
		20 {
			key {
				field = list_type
			}
		}
	}

	# Divider
	div = COA
	div {

		# Divider
		10 = TEXT
		10 {
			value = <hr />
		}
	}

	# HTML
	html = COA
	html {
		10 = TEXT
		10 {
			field = bodytext
		}
	}

	# Default
	default = COA
	default {
		stdWrap {
			wrap = <p>|</p>
		}

		10 = TEXT
		10 {
			stdWrap {
				wrap = Content element type "|" has no rendering definition!
			}

			field = CType
		}
	}
}

# Styles
plugin.tx_hypehtml5._CSS_DEFAULT_STYLE (

	/* Content */
	.clearfix:before,
	.clearfix:after,
	.csc-default:before,
	.csc-default:after {
		display: table;
		content: "";
	}
	.clearfix:after,
	.csc-default:after {
		clear: both;
	}
	.clearfix,
	.csc-default {
		*zoom: 1;
	}

	/* Image */
	.csc-image {
		display: table;
		table-layout: fixed;
		float: left;
		margin: 0 0 {$styles.content.imgtext.rowSpace}px 0;
	}
	.csc-image img {
		display: block;
	}

	/* Image, left */
	.csc-orientation-left .csc-image,
	.csc-orientation-lefttop .csc-image,
	.csc-orientation-leftbottom .csc-image,
	.csc-orientation-floatleft .csc-image {
		margin-right: {$styles.content.imgtext.colSpace}px;
	}

	/* Image, right */
	.csc-orientation-right .csc-image,
	.csc-orientation-righttop .csc-image,
	.csc-orientation-rightbottom .csc-image,
	.csc-orientation-floatright .csc-image {
		margin-left: {$styles.content.imgtext.colSpace}px;
	}

	/* Image, center */
	.csc-orientation-centertop .csc-image,
	.csc-orientation-centerbottom .csc-image {
		margin-left: {$styles.content.imgtext.colSpace}px;
	}

	/* Image, left of text */
	.csc-orientation-left .csc-imagewrap,
	.csc-orientation-floatleft .csc-imagewrap {
		margin-right: {$styles.content.imgtext.textMargin}px;
	}

	/* Image, right of text */
	.csc-orientation-right .csc-imagewrap,
	.csc-orientation-floatright .csc-imagewrap {
		margin-left: {$styles.content.imgtext.textMargin}px;
	}

	/* Orientation, center */
	.csc-orientation-centertop,
	.csc-orientation-centerbottom {
		text-align: center;
	}
	.csc-orientation-centertop .csc-imagewrap,
	.csc-orientation-centerbottom .csc-imagewrap {
		display: inline-block;
	}
	.csc-orientation-centertop .csc-image,
	.csc-orientation-centerbottom .csc-image,
	.csc-orientation-centertop .csc-text,
	.csc-orientation-centerbottom .csc-text,
	.csc-orientation-centertop .csc-header,
	.csc-orientation-centerbottom .csc-header,
	.csc-orientation-centertop .csc-subheader,
	.csc-orientation-centerbottom .csc-subheader,
	.csc-orientation-centertop .csc-date,
	.csc-orientation-centerbottom .csc-date {
		text-align: left;
	}

	/* Wrap, right */
	.csc-orientation-righttop .csc-imagewrap,
	.csc-orientation-rightbottom .csc-imagewrap,
	.csc-orientation-right .csc-imagewrap,
	.csc-orientation-floatright .csc-imagewrap {
		float: right;
	}
	.csc-orientation-righttop .csc-text,
	.csc-orientation-rightbottom .csc-text {
		clear: right;
	}

	/* Wrap, left */
	.csc-orientation-lefttop .csc-imagewrap,
	.csc-orientation-leftbottom .csc-imagewrap,
	.csc-orientation-left .csc-imagewrap,
	.csc-orientation-floatleft .csc-imagewrap {
		float: left;
	}
	.csc-orientation-lefttop .csc-text,
	.csc-orientation-leftbottom .csc-text {
		clear: left;
	}

	/* First/Last Image */
	.csc-imagewrap .csc-image-first {
		margin-left: 0;
	}
	.csc-imagewrap .csc-image-last {
		margin-right: 0;
	}

	/* Text */
	.csc-orientation-left .csc-text,
	.csc-orientation-right .csc-text {
		overflow: hidden;
	}

	/* Column */
	.csc-imagewrap .csc-column {
		float: left;
	}
	.csc-imagewrap .csc-column .csc-image {
		clear: both;
	}

	/* Row */
	.csc-imagewrap .csc-row {
		overflow: hidden;
	}

	/* Caption */
	.csc-caption {
		display: table-caption;
		caption-side: bottom;
		clear: both;
	}

	/* Anchor */
	.csc-anchor {
		clear: both;
	}

	/* Alignment */
	.csc-alignment-left .csc-header,
	.csc-alignment-left .csc-subheader,
	.csc-alignment-left .csc-date,
	.csc-alignment-left .csc-caption {
		text-align: left;
	}
	.csc-alignment-center .csc-header,
	.csc-alignment-center .csc-subheader,
	.csc-alignment-center .csc-date,
	.csc-alignment-center .csc-caption {
		text-align: center;
	}
	.csc-alignment-right .csc-header,
	.csc-alignment-right .csc-subheader,
	.csc-alignment-right .csc-date,
	.csc-alignment-right .csc-caption {
		text-align: right;
	}
)